#pragma kernel CS_Wave

#define PI 3.14159265358979323846
 
RWTexture2DArray<float3> _HeightMap;

struct WaveSettings{
    float steepness;
    float waveLen;
    float speed;
    int angle;
};
StructuredBuffer<WaveSettings> _WaveSettingsBuffer;
float _FrameTime;
float _Resolution;
int _WaveNum;

float rad(int angle){
    return angle * (PI / 180);
}

float2 direction(float angle){
    return normalize(float2(cos(angle),sin(angle)));
}

//nvidia 1st GPU Gems 1.2 Sum of Sines Approximation
[numthreads(32,32,1)]
void CS_Wave(uint3 id : SV_DispatchThreadID){

    //1024x1024
    float2 uv = float2(id.x / _Resolution, id.y / _Resolution);
    
    float3 height = float3(0.0f,0.0f,0.0f);
    float3 normal = float3(0.0f,1.0f,0.0f);

    for(int i = 0; i < _WaveNum; i++){

        float frequency = 2.0f / _WaveSettingsBuffer[i].waveLen; 
        float phase =  _WaveSettingsBuffer[i].speed * frequency;
        float2 dir = direction(rad(_WaveSettingsBuffer[i].angle));
        float a = dot(dir, uv) * frequency + _FrameTime * phase;

        height.x += dir.x * _WaveSettingsBuffer[i].steepness * cos(a);
        height.y += _WaveSettingsBuffer[i].steepness * sin(a);
        height.z += dir.y * _WaveSettingsBuffer[i].steepness * cos(a);

        normal.x += frequency * dir.y * (_WaveSettingsBuffer[i].steepness * sin(a));
        normal.z += frequency * dir.x * (_WaveSettingsBuffer[i].steepness * sin(a));
    }
    normal.x *= -1;
    normal.z *= -1;
    normal = normalize(normal);
    
    _HeightMap[uint3(id.xy, 0)] = height;   
    _HeightMap[uint3(id.xy, 1)] = normal;   
}
