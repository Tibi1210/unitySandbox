#pragma kernel CSMain

RWTexture2DArray<float4> _Result;
float _Scale;

// 0: integer hash
// 1: float hash (aliasing based)
#define METHOD 0

// 0: cubic
// 1: quintic
#define INTERPOLANT 1

#if METHOD==0
    float hash( int3 p )    // this hash is not production ready, please
    {                        // replace this by something better

        // 3D -> 1D
        int n = p.x*3 + p.y*113 + p.z*311;

        // 1D hash by Hugo Elias
        n = (n << 13) ^ n;
        n = n * (n * n * 15731 + 789221) + 1376312589;
        return -1.0+2.0*float( n & 0x0fffffff)/float(0x0fffffff);
    }
#else
    float hash(float3 p)  // replace this by something better
    {
        p  = 50.0*frac( p*0.3183099 + float3(0.71,0.113,0.419));
        return -1.0+2.0*frac( p.x*p.y*p.z*(p.x+p.y+p.z) );
    }
#endif


// return value noise (in x) and its derivatives (in yzw)
float4 noised(float3 x)
{
    #if METHOD==0
        int3 i = int3(floor(x));
    #else
        float3 i = floor(x);
    #endif
        float3 w = frac(x);
    
    #if INTERPOLANT==1
        // quintic interpolation
        float3 u = w*w*w*(w*(w*6.0-15.0)+10.0);
        float3 du = 30.0*w*w*(w*(w-2.0)+1.0);
    #else
        // cubic interpolation
        float3 u = w*w*(3.0-2.0*w);
        float3 du = 6.0*w*(1.0-w);
    #endif    
 
    #if METHOD==0
        float a = hash(i+int3(0,0,0));
        float b = hash(i+int3(1,0,0));
        float c = hash(i+int3(0,1,0));
        float d = hash(i+int3(1,1,0));
        float e = hash(i+int3(0,0,1));
        float f = hash(i+int3(1,0,1));
        float g = hash(i+int3(0,1,1));
        float h = hash(i+int3(1,1,1));
	#else
        float a = hash(i+float3(0,0,0));
        float b = hash(i+float3(1,0,0));
        float c = hash(i+float3(0,1,0));
        float d = hash(i+float3(1,1,0));
        float e = hash(i+float3(0,0,1));
        float f = hash(i+float3(1,0,1));
        float g = hash(i+float3(0,1,1));
        float h = hash(i+float3(1,1,1));
    #endif
    
    float k0 =   a;
    float k1 =   b - a;
    float k2 =   c - a;
    float k3 =   e - a;
    float k4 =   a - b - c + d;
    float k5 =   a - c - e + g;
    float k6 =   a - b - e + f;
    float k7 = - a + b + c - d + e - f - g + h;

    return float4( k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z, 
                 du * float3( k1 + k4*u.y + k6*u.z + k7*u.y*u.z,
                            k2 + k5*u.z + k4*u.x + k7*u.z*u.x,
                            k3 + k6*u.x + k5*u.y + k7*u.x*u.y ) );
}


const float3x3 m3  = float3x3( 0.00,  0.80,  0.60,
    -0.80,  0.36, -0.48,
    -0.60, -0.48,  0.64 );
const float3x3 m3i = float3x3( 0.00, -0.80, -0.60,
     0.80,  0.36, -0.48,
     0.60, -0.48,  0.64 );
const float2x2 m2 = float2x2(  0.80,  0.60,
    -0.60,  0.80 );
const float2x2 m2i = float2x2( 0.80, -0.60,
     0.60,  0.80 );

// returns 3D fbm and its 3 derivatives
float4 fbm( in float3 x, int octaves )
{
    float f = 1.98;  // could be 2.0
    float s = 0.49;  // could be 0.5
    float a = 0.0;
    float b = 0.5;
    float3  d = float3(0.0, 0.0, 0.0);
    float3x3  m = float3x3(1.0,0.0,0.0,
    0.0,1.0,0.0,
    0.0,0.0,1.0);
    for( int i=0; i < octaves; i++ )
    {
        float4 n = noised(x);
        a += b*n.x;          // accumulate values
        //d += b*m*n.yzw;      // accumulate derivatives
        d += b * mul(m, n.yzw);  // Use 'mul' for matrix-vector multiplication
        b *= s;
        //x = f*m3*x;
        x = f * mul(m3, x);
        //m = f*m3i*m;
        m = f * mul(m3i, m);
    }
    return float4( a, d );
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID){

    float2 uv = float2(id.x / 1024.0, id.y / 1024.0);
    float4 color = noised(float3(uv.xy*_Scale, 0.0));
    //float4 color = fbm(float3(uv.xy*_Scale, 0.0),8);
    
    _Result[uint3(id.xy, 0)] = color;
    
}
