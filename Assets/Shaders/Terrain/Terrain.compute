#pragma kernel FractalNoiseCS

RWTexture2DArray<float4> _Result;
float _BaseFrequency;
int _OctaveCount;

struct OctaveParams {
    float frequency;
    float amplitude;
    float lacunarity;
    float persistence;
};
StructuredBuffer<OctaveParams> _Octaves;

/**
 * @brief Fowler-Noll-Vo hash function (FNV-1a variant)
 * @param x coordinate input for hashing
 * @param y coordinate input for hashing
 * @param z coordinate input for hashing
 * @return A 32-bit unsigned integer hash value
 */
uint FNV32(uint x, uint y, uint z) {
    const uint FNV_PRIME = 16777619;
    uint hash = 2166136261;
    hash = (hash ^ x) * FNV_PRIME;
    hash = (hash ^ y) * FNV_PRIME;
    hash = (hash ^ z) * FNV_PRIME;
    return hash;
}    

/**
 * @brief Generates a pseudo-random 3D gradient vector based on input coordinates
 * @param coord 3D integer coordinates used as seed for the hash function
 * @return A normalized 3D vector representing a gradient direction
 */
float3 HashGradient(uint3 coord) {
    uint hash = FNV32(coord.x, coord.y, coord.z);
    float phi = hash * 2.39996e-6; // 2Ï€ / 0xFFFFFFFF
    return float3(cos(phi), sin(phi), cos(phi * 3.14159));
}    

struct NoiseOutput {
    float value;
    float3 derivative;
}; 

/**
 * @brief Computes Perlin noise value and its derivatives at a given 3D point
 * @param p 3D point in space where noise should be evaluated
 * @return NoiseOutput structure containing both the noise value and its 3D derivative
 */
NoiseOutput PerlinWithDerivatives(float3 p) {
    float3 pi = floor(p);
    float3 pf = p - pi;
    
    // Quintic interpolation curve
    float3 t = pf * pf * pf * (pf * (pf * 6.0 - 15.0) + 10.0);
    float3 dt = 30.0 * pf * pf * (pf * (pf - 2.0) + 1.0);
    
    // Gradient contributions from 8 corners
    float3 grads[8];
    for (int i = 0; i < 8; i++) {
        uint3 offset = uint3(i & 1, (i >> 1) & 1, (i >> 2) & 1);
        grads[i] = HashGradient(pi + offset);
    }    
    
    // Dot products and interpolation
    float a = dot(grads[0], pf - float3(0, 0, 0));
    float b = dot(grads[1], pf - float3(1, 0, 0));
    float c = dot(grads[2], pf - float3(0, 1, 0));
    float d = dot(grads[3], pf - float3(1, 1, 0));
    float e = dot(grads[4], pf - float3(0, 0, 1));
    float f = dot(grads[5], pf - float3(1, 0, 1));
    float g = dot(grads[6], pf - float3(0, 1, 1));
    float h = dot(grads[7], pf - float3(1, 1, 1));
    
    // x-direction interpolation
    float ab = lerp(a, b, t.x);
    float cd = lerp(c, d, t.x);
    float ef = lerp(e, f, t.x);
    float gh = lerp(g, h, t.x);
    
    // Final value and derivatives
    NoiseOutput output;
    output.value = lerp(lerp(ab, cd, t.y), lerp(ef, gh, t.y), t.z);
    
    float3 dtdx = dt * float3(1, 0, 0);
    float3 dtdy = dt * float3(0, 1, 0);
    float3 dtdz = dt * float3(0, 0, 1);
    
    // Derivative chain rule application
    output.derivative = (grads[0] * (1 - t.x) + grads[1] * t.x) * dtdx  
                      + (grads[2] * (1 - t.x) + grads[3] * t.x) * dtdy  
                      + (grads[4] * (1 - t.x) + grads[5] * t.x) * dtdz;
    return output;                  
}    

/**
 * @brief Main compute shader kernel that generates fractal noise with derivatives
 * @param id Thread ID containing the x,y coordinates to process
 * 
 * Generates fractal (multi-octave) Perlin noise by summing multiple octaves
 * with different frequencies and amplitudes. Stores both the final noise value
 * and its derivatives in the output texture.
 */
[numthreads(8, 8, 1)]
void FractalNoiseCS(uint3 id : SV_DispatchThreadID) {
    float2 uv = (id.xy + 0.5) / float2(2048.0, 2048.0);

    float total = 0;
    float3 derivative = 0;
    float amplitude = 1.0;
    float frequency = _BaseFrequency;
    
    for (int i = 0; i < _OctaveCount; i++) {
        frequency += _Octaves[i].frequency;
        amplitude += _Octaves[i].amplitude;
        NoiseOutput noise = PerlinWithDerivatives(float3(uv, 0.0) * frequency);
        total += noise.value * amplitude;
        derivative += noise.derivative * (amplitude * frequency);
        
        amplitude *= _Octaves[i].persistence;
        frequency *= _Octaves[i].lacunarity;
    }
    
    _Result[uint3(id.xy, 0)] = float4(total, derivative);
}
