#pragma kernel CSMain

RWTexture2DArray<float4> _Result;
float4 _Scale;
float _Amplitude;
int _Octaves, _Seed;


// Pseudo-random hash function
float Hash(float2 p) {
    return frac(sin(dot(p, float2(127.1, 311.7))) * 43758.5453123);
}

// Interpolation function (smoothstep)
float Interpolate(float a, float b, float t) {
    t = t * t * (3.0 - 2.0 * t);
    return lerp(a, b, t);
}

// Gradient-based Perlin noise
float PerlinNoise(float2 uv) {
    float2 p = floor(uv);
    float2 f = frac(uv);

    // Corner gradients
    float a = Hash(p + float2(0.0, 0.0));
    float b = Hash(p + float2(1.0, 0.0));
    float c = Hash(p + float2(0.0, 1.0));
    float d = Hash(p + float2(1.0, 1.0));

    // Bilinear interpolation
    float u = Interpolate(a, b, f.x);
    float v = Interpolate(c, d, f.x);
    return Interpolate(u, v, f.y);
}

float BFMPerlin(float2 uv) {
    float2 asd = uv;
    float noise = 0.0;
    float amplitude = _Amplitude;

    for (int i = 0; i < _Octaves; i++) {
        noise += PerlinNoise(asd) * amplitude;
        amplitude *= 0.5;
        asd *= 2.0;
    }
    return noise;
}



[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID){

    float2 uv = float2(id.x / 2048.0, id.y / 2048.0);

    float4 layer1 = float4(BFMPerlin((uv + float2(1.0,0.0)) * _Scale[0]), 0.0, 0.0, 0.0);
    float4 layer2 = float4(BFMPerlin((uv + float2(0.0,1.0)) * _Scale[1]), 0.0, 0.0, 0.0);
    float4 layer3 = float4(BFMPerlin((uv + float2(1.0,1.0)) * _Scale[2]), 0.0, 0.0, 0.0);
    float4 layer4 = float4(BFMPerlin(uv * _Scale[3]), 0.0, 0.0, 0.0);

    _Result[uint3(id.xy, 0)] = layer1;
    _Result[uint3(id.xy, 1)] = layer2;
    _Result[uint3(id.xy, 2)] = layer3;
    _Result[uint3(id.xy, 3)] = layer4;
    
}
