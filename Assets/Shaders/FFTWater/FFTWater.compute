#pragma kernel CS_InitializeSpectrum
#pragma kernel CS_PackSpectrumConjugate
#pragma kernel CS_UpdateSpectrumForFFT
#pragma kernel CS_HorizontalFFT
#pragma kernel CS_VerticalFFT
#pragma kernel CS_AssembleMaps

#define PI 3.14159265358979323846

RWTexture2DArray<float4> _SpectrumTextures, _InitialSpectrumTextures, _DisplacementTextures;
RWTexture2DArray<float2> _SlopeTextures;

float _FrameTime, _Gravity, _RepeatTime, _Depth, _LowCutoff, _HighCutoff;
int _Seed;
float2 _Lambda, _NormalStrength;
uint _N, _LengthScale0, _LengthScale1, _LengthScale2, _LengthScale3;
float _FoamBias, _FoamDecayRate, _FoamAdd, _FoamThreshold;

/**
 * @brief Complex number multiplication
 * @param a First complex number as float2 (real, imaginary)
 * @param b Second complex number as float2 (real, imaginary)
 * @return Result of complex multiplication as float2
 */
float2 ComplexMult(float2 a, float2 b){
    return float2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

/**
 * @brief Converts angle to complex number in polar form (Euler's formula)
 * @param x Angle in radians
 * @return Complex number as float2 (cos(x), sin(x))
 */
float2 EulerFormula(float x){
    return float2(cos(x), sin(x));
}

/**
 * @brief Integer hash function based on Hugo Elias algorithm
 * @param n Unsigned integer seed value
 * @return Pseudo-random float in range [0,1]
 */
float hash(uint n){
    n = (n << 13U) ^ n;
    n = n * (n * n * 15731U + 0x789221U) + 0x1376312589U;
    return float(n & uint(0x7fffffffU)) / float(0x7fffffff);
}

/**
 * @brief Transforms uniform random samples to Gaussian distribution using Box-Muller transform
 * @param u1 First uniform random sample in range [0,1]
 * @param u2 Second uniform random sample in range [0,1]
 * @return Two independent Gaussian random variables as float2
 */
float2 UniformToGaussian(float u1, float u2){
    float R = sqrt(-2.0 * log(u1));
    float theta = 2.0 * PI * u2;
    return float2(R * cos(theta), R * sin(theta));
}

// Referenced from https://github.com/gasgiant/FFT-Ocean/
struct SpectrumParameters{
    float scale;
    float angle;
    float spreadBlend;
    float swell;
    float alpha;
    float peakFrequency;
    float gamma;
    float shortWavesFade;
};

StructuredBuffer<SpectrumParameters> _Spectrums;

// Referenced from: https://m.cdn.blog.hu/da/darthasylum/tutorials/C++/ch56_ocean.html
/**
 * @brief Calculates dispersion relation for water waves
 * @param kMag Magnitude of wave vector (wavenumber)
 * @return Angular frequency of waves based on wavenumber
 */
float Dispersion(float kMag){
    return sqrt(_Gravity * kMag * tanh(min(kMag * _Depth, 20)));
}

/**
 * @brief Calculates derivative of dispersion relation with respect to wavenumber
 * @param kMag Magnitude of wave vector (wavenumber)
 * @return Derivative of dispersion relation
 */
float DispersionDerivative(float kMag){
    float th = tanh(min(kMag * _Depth, 20));
    float ch = cosh(kMag * _Depth);
    return _Gravity * (_Depth * kMag / ch / ch + th) / Dispersion(kMag) / 2.0;
}

/**
 * @brief Calculates normalization factor for directional spreading function
 * @param s Spreading parameter
 * @return Normalization factor to ensure directional spectrum integrates to 1
 */
float NormalizationFactor(float s){
    float s2 = s * s;
    float s3 = s2 * s;
    float s4 = s3 * s;
    if (s < 5){
        return -0.000564 * s4 + 0.00776 * s3 - 0.044 * s2 + 0.192 * s + 0.163;
    }else{
        return -4.80e-08 * s4 + 1.07e-05 * s3 - 9.53e-04 * s2 + 5.90e-02 * s + 3.93e-01;
    }
}

/**
 * @brief Cosine-powered directional spreading function
 * @param theta Direction angle in radians
 * @param s Spreading parameter controlling directional concentration
 * @return Directional spreading value
 */
float Cosine2s(float theta, float s){
    return NormalizationFactor(s) * pow(abs(cos(0.5 * theta)), 2.0 * s);
}

/**
 * @brief Calculates spreading power based on frequency ratio
 * @param frequency Current wave frequency
 * @param peakFrequency Peak frequency of the spectrum
 * @return Spreading power parameter
 */
float SpreadPower(float frequency, float peakFrequency){
    if (frequency > peakFrequency){
        return 9.77 * pow(abs(frequency / peakFrequency), -2.5);
    }else{
        return 6.97 * pow(abs(frequency / peakFrequency), 5.0);
    }
}

/**
 * @brief Directional spreading function for wave spectrum
 * @param theta Direction angle in radians
 * @param frequency Current wave frequency
 * @param spectrum Spectrum parameters structure
 * @return Directional spreading factor
 */
float DirectionSpectrum(float theta, float frequency, SpectrumParameters spectrum){
    float s = SpreadPower(frequency, spectrum.peakFrequency) + 
              16 * tanh(min(frequency / spectrum.peakFrequency, 20)) * 
              spectrum.swell * spectrum.swell;
    return lerp(2.0 / 3.1415 * cos(theta) * cos(theta), 
                Cosine2s(theta - spectrum.angle, s), 
                spectrum.spreadBlend);
}

/**
 * @brief TMA (Texel-Marsen-Arsloe) correction for finite water depth
 * @param frequency Wave frequency
 * @return Correction factor for shallow water effects
 */
float TMACorrection(float frequency){
    float wH = frequency * sqrt(_Depth / _Gravity);
    if (wH <= 1.0){
        return 0.5 * wH * wH;
    }
    if (wH < 2.0){
        return 1.0 - 0.5 * (2.0 - wH) * (2.0 - wH);
    }
    return 1.0;
}

/**
 * @brief Applies exponential attenuation to short wavelengths
 * @param kMag Magnitude of wave vector (wavenumber)
 * @param spectrum Spectrum parameters structure
 * @return Attenuation factor for short waves
 */
float ShortWavesFade(float kMag, SpectrumParameters spectrum){
    return exp(-spectrum.shortWavesFade * spectrum.shortWavesFade * kMag * kMag);
}

/**
 * @brief JONSWAP-TMA wave spectrum model
 * @param frequency Wave frequency
 * @param spectrum Spectrum parameters structure
 * @return Spectral energy density at given frequency
 */
float JONSWAP_TMA(float frequency, SpectrumParameters spectrum){
    float sigma = (frequency <= spectrum.peakFrequency) ? 0.07 : 0.09;

    //https://wikiwaves.org/Ocean-Wave_Spectra#JONSWAP_Spectrum
    float r = exp(-pow(frequency - spectrum.peakFrequency, 2) / 
                  (2.0 * pow(sigma, 2) * pow(spectrum.peakFrequency, 2)));

    //https://apps.dtic.mil/sti/pdfs/ADA157975.pdf
    //float r = exp(-pow(frequency / (1 - spectrum.peakFrequency), 2) / 
    //                    (2.0 * pow(sigma, 2), 2));
    
    
    float frqRcp = rcp(frequency);
    float peakFoverF = spectrum.peakFrequency / frequency;

    return spectrum.scale * 
           spectrum.alpha * (_Gravity * _Gravity) *
           frqRcp * frqRcp * frqRcp * frqRcp * frqRcp * 
           TMACorrection(frequency) *
           exp(-1.25 * peakFoverF * peakFoverF * peakFoverF * peakFoverF) *
           pow(abs(spectrum.gamma), r);
}

/**
 * @brief Initializes the wave spectrum using JONSWAP-TMA model and directional spreading
 * @param id Thread ID containing x,y coordinates to process
 * 
 * Generates the initial wave spectrum data for each scale level based on physical ocean wave models.
 * Uses Gaussian random variables to create realistic wave patterns with proper statistical properties.
 * Applies spectrum modifications based on wave frequency, direction, and depth.
 */
[numthreads(32, 32, 1)]
void CS_InitializeSpectrum(uint3 id : SV_DISPATCHTHREADID){
    uint seed = id.x + _N * id.y + _N;
    seed += _Seed;

    float lengthScales[4] = { _LengthScale0, _LengthScale1, _LengthScale2, _LengthScale3 };

    [unroll]
    for (uint i = 0; i < 4; ++i){
        float halfN = _N / 2.0;
        float deltaK = 2.0 * PI / lengthScales[i];
        float2 K = (id.xy - halfN) * deltaK;
        float kMag = length(K);

        seed += i + hash(seed) * 10;
        float4 uniformRandSamples = float4(hash(seed), hash(seed * 2), hash(seed * 3), hash(seed * 4));
        float2 gauss1 = UniformToGaussian(uniformRandSamples.x, uniformRandSamples.y);
        float2 gauss2 = UniformToGaussian(uniformRandSamples.z, uniformRandSamples.w);

        if (_LowCutoff <= kMag && kMag <= _HighCutoff){
            float kAngle = atan2(K.y, K.x);
            float frequency = Dispersion(kMag);
            float dFrequencydk = DispersionDerivative(kMag);

            float spectrum = JONSWAP_TMA(frequency, _Spectrums[i * 2]) * 
                             DirectionSpectrum(kAngle, frequency, _Spectrums[i * 2]) * 
                             ShortWavesFade(kMag, _Spectrums[i * 2]);
            
            if (_Spectrums[i * 2 + 1].scale > 0){
                spectrum += JONSWAP_TMA(frequency, _Spectrums[i * 2 + 1]) * 
                            DirectionSpectrum(kAngle, frequency, _Spectrums[i * 2 + 1]) * 
                            ShortWavesFade(kMag, _Spectrums[i * 2 + 1]);
            }
            
            _InitialSpectrumTextures[uint3(id.xy, i)] = float4(
                float2(gauss2.x, gauss1.y) * 
                sqrt(2 * spectrum * abs(dFrequencydk) / kMag * deltaK * deltaK), 
                0.0, 0.0);
        }else{
            _InitialSpectrumTextures[uint3(id.xy, i)] = 0.0;
        }
    }
}

/**
 * @brief Organizes spectrum data for FFT by creating conjugate pairs
 * @param id Thread ID containing x,y coordinates to process
 * 
 * Creates a structure in the spectrum data where each wave frequency component 
 * has its conjugate pair, ensuring the resulting height field will be real-valued.
 */
[numthreads(32, 32, 1)]
void CS_PackSpectrumConjugate(uint3 id : SV_DISPATCHTHREADID){
    [unroll]
    for (uint i = 0; i < 4; ++i){
        float2 h0 = _InitialSpectrumTextures[uint3(id.xy, i)].rg;
        float2 h0conj = _InitialSpectrumTextures[uint3((_N - id.x) % _N, (_N - id.y) % _N, i)].rg;

        _InitialSpectrumTextures[uint3(id.xy, i)] = float4(h0, h0conj.x, -h0conj.y);
    }
}

/**
 * @brief Updates the wave spectrum over time for FFT processing
 * @param id Thread ID containing x,y coordinates to process
 * 
 * Evolves the wave spectrum over time by applying dispersion relations.
 * Calculates wave displacements and slopes in different directions.
 * Prepares data for the FFT transformation to generate the final wave field.
 */
[numthreads(32, 32, 1)]
void CS_UpdateSpectrumForFFT(uint3 id : SV_DISPATCHTHREADID){
    float lengthScales[4] = { _LengthScale0, _LengthScale1, _LengthScale2, _LengthScale3 };

    [unroll]
    for (int i = 0; i < 4; ++i){
        float4 initialSignal = _InitialSpectrumTextures[uint3(id.xy, i)];
        float2 h0 = initialSignal.xy;
        float2 h0conj = initialSignal.zw;

        // Spatial frequency components
        float halfN = _N / 2.0;
        float deltaK = 2.0 * PI / lengthScales[i];
        // Wave vector, representing the direction and frequency of each wave
        float2 K = (id.xy - halfN) * deltaK;
        float kMag = length(K);
        float kMagRcp = rcp(kMag);

        if (kMag < 0.0001){
            kMagRcp = 1.0;
        }

        // Base frequency
        float w_0 = 2.0 * PI / _RepeatTime;
        // Phase speed of the wave, determining how fast each wave oscillates
        float dispersion = floor(sqrt(_Gravity * kMag) / w_0) * w_0 * _FrameTime;
        float2 exponent = EulerFormula(dispersion);

        // Time-evolved wave amplitude
        float2 htilde = ComplexMult(h0, exponent) + ComplexMult(h0conj, float2(exponent.x, -exponent.y));
       
        // Directional displacements
        float2 ih = float2(-htilde.y, htilde.x);
        float2 displacementX = ih * K.x * kMagRcp;
        float2 displacementY = htilde;
        float2 displacementZ = ih * K.y * kMagRcp;
        // Partial derivatives of the displacements
        float2 displacementX_dx = -htilde * K.x * K.x * kMagRcp;
        float2 displacementY_dx = ih * K.x;
        float2 displacementZ_dx = -htilde * K.x * K.y * kMagRcp;
        // Height changes in different directions
        float2 displacementY_dz = ih * K.y;
        float2 displacementZ_dz = -htilde * K.y * K.y * kMagRcp;

        float2 htildeDisplacementX = float2(displacementX.x - displacementZ.y, displacementX.y + displacementZ.x);
        float2 htildeDisplacementZ = float2(displacementY.x - displacementZ_dx.y, displacementY.y + displacementZ_dx.x);
        
        float2 htildeSlopeX = float2(displacementY_dx.x - displacementY_dz.y, displacementY_dx.y + displacementY_dz.x);
        float2 htildeSlopeZ = float2(displacementX_dx.x - displacementZ_dz.y, displacementX_dx.y + displacementZ_dz.x);

        _SpectrumTextures[uint3(id.xy, i * 2)] = float4(htildeDisplacementX, htildeDisplacementZ);
        _SpectrumTextures[uint3(id.xy, i * 2 + 1)] = float4(htildeSlopeX, htildeSlopeZ);
    }
}

#define SIZE 1024
#define LOG_SIZE 10

RWTexture2DArray<float4> _FourierTarget;
// D3D11 the maximum size is 32kb
groupshared float4 fftGroupBuffer[2][SIZE];

/**
 * @brief Calculates butterfly indices and twiddle factors for FFT
 * @param step Current FFT step
 * @param index Thread index
 * @param indices Output parameter for butterfly indices
 * @param twiddle Output parameter for twiddle factor
 */
void ButterflyValues(uint step, uint index, out uint2 indices, out float2 twiddle){
    const float twoPi = 6.28318530718;

    uint b = SIZE >> (step + 1); // "Butterfly size" for current step (halves at each step of the FFT)

    // Calculate the offset in the current step, allowing each thread to access the correct values within its "butterfly"
    uint w = b * (index / b); // Base index for this butterfly
    uint i = (w + index) % SIZE; // Current element in this stage

    // Twiddle is a complex exponential value that rotates elements in the FFT
    sincos(-twoPi / SIZE * w, twiddle.y, twiddle.x); // Cosine and sine values for the rotation
    // This is what makes it the inverse FFT
    twiddle.y = -twiddle.y;
    indices = uint2(i, i + b); // Pair of indices for the butterfly combination
}

/**
 * @brief Performs Fast Fourier Transform on input data
 * @param threadIndex Index of the current thread
 * @param input Input data to transform
 * @return FFT-transformed data
 */
float4 FFT(uint threadIndex, float4 input){
    fftGroupBuffer[0][threadIndex] = input;
    GroupMemoryBarrierWithGroupSync();
    bool pingpong = false;

    [unroll]
    for (uint step = 0; step < LOG_SIZE; ++step){
        uint2 inputsIndices;
        float2 twiddle;
        ButterflyValues(step, threadIndex, inputsIndices, twiddle);

        // Rotates the element from the second index with the twiddle factor using ComplexMult
        // Combines it with the element at the first index
        float4 v = fftGroupBuffer[pingpong][inputsIndices.y];
        fftGroupBuffer[!pingpong][threadIndex] = fftGroupBuffer[pingpong][inputsIndices.x] + 
            float4(ComplexMult(twiddle, v.xy), ComplexMult(twiddle, v.zw));

        pingpong = !pingpong;
        GroupMemoryBarrierWithGroupSync();
    }

    return fftGroupBuffer[pingpong][threadIndex];
}

/**
 * @brief Performs horizontal Fast Fourier Transform on wave spectrum data
 * @param id Thread ID containing x,y coordinates to process
 * 
 * Applies the FFT algorithm along the horizontal dimension of the wave spectrum.
 * Transforms frequency domain data into spatial domain for each scale level.
 */
[numthreads(SIZE, 1, 1)]
void CS_HorizontalFFT(uint3 id : SV_DISPATCHTHREADID){
    for (int i = 0; i < 8; ++i){
        _FourierTarget[uint3(id.xy, i)] = FFT(id.x, _FourierTarget[uint3(id.xy, i)]);
    }
}

/**
 * @brief Performs vertical Fast Fourier Transform on wave spectrum data
 * @param id Thread ID containing x,y coordinates to process
 * 
 * Applies the FFT algorithm along the vertical dimension of the wave spectrum.
 * Completes the 2D FFT process by transforming the partially transformed data.
 */
[numthreads(SIZE, 1, 1)]
void CS_VerticalFFT(uint3 id : SV_DISPATCHTHREADID){
    for (int i = 0; i < 8; ++i){
        _FourierTarget[uint3(id.yx, i)] = FFT(id.x, _FourierTarget[uint3(id.yx, i)]);
    }
}

/**
 * @brief Applies alternating sign pattern to FFT data
 * @param data Input FFT data
 * @param id Thread ID
 * @return Permuted data with alternating signs
 */
float4 Permute(float4 data, float3 id){
    return data * (1.0 - 2.0 * ((id.x + id.y) % 2));
}

/**
 * @brief Assembles final displacement and slope maps from FFT results
 * @param id Thread ID containing x,y coordinates to process
 * 
 * Calculates the final wave displacements, slopes, and foam based on the processed wave spectrum.
 * Computes the Jacobian determinant to determine surface curvature and steepness.
 * Applies foam generation based on wave breaking conditions.
 * Stores results in output textures for rendering.
 */
[numthreads(32, 32, 1)]
void CS_AssembleMaps(uint3 id : SV_DISPATCHTHREADID){
    [unroll]
    for (int i = 0; i < 4; ++i){
        float4 htildeDisplacement = Permute(_SpectrumTextures[uint3(id.xy, i * 2)], id);
        float4 htildeSlope = Permute(_SpectrumTextures[uint3(id.xy, i * 2 + 1)], id);

        float2 htildeDisplacementX = htildeDisplacement.rg;
        float2 htildeDisplacementZ = htildeDisplacement.ba;
        float2 htildeSlopeX = htildeSlope.rg;
        float2 htildeSlopeZ = htildeSlope.ba;
        
        // Jacobian determinant for the surface curvature and steepness
        float jacobian = (1.0f + _Lambda.x * htildeSlopeZ.x) * (1.0f + _Lambda.y * htildeSlopeZ.y) - 
                         _Lambda.x * _Lambda.y * htildeDisplacementZ.y * htildeDisplacementZ.y;

        float3 displacement = float3(_Lambda.x * htildeDisplacementX.x, 
                                    htildeDisplacementZ.x, 
                                    _Lambda.y * htildeDisplacementX.y);

        float2 slopes = htildeSlopeX.xy / (1 + abs(htildeSlopeZ * _Lambda));

        float foam = _DisplacementTextures[uint3(id.xy, i)].a;
        foam *= exp(-_FoamDecayRate);
        foam = saturate(foam);

        float biasedJacobian = max(0.0, -(jacobian - _FoamBias));

        if (biasedJacobian > _FoamThreshold){
            foam += _FoamAdd * biasedJacobian;
        }

        _DisplacementTextures[uint3(id.xy, i)] = float4(displacement, foam);
        _SlopeTextures[uint3(id.xy, i)] = float2(slopes);
    }
}
